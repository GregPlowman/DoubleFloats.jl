# 1 / factorial(i)
const n_inv_fact = 32
const inv_fact = Double{Float64,Accuracy}[
  Double(1.0,0.0),
  Double(0.5,0.0),
  Double(0.16666666666666666,9.25185853854297e-18),
  Double(0.041666666666666664,2.3129646346357427e-18),
  Double(0.008333333333333333,1.1564823173178714e-19),
  Double(0.001388888888888889,-5.300543954373577e-20),
  Double(0.0001984126984126984,1.7209558293420705e-22),
  Double(2.48015873015873e-5,2.1511947866775882e-23),
  Double(2.7557319223985893e-6,-1.858393274046472e-22),
  Double(2.755731922398589e-7,2.3767714622250297e-23),
  Double(2.505210838544172e-8,-1.448814070935912e-24),
  Double(2.08767569878681e-9,-1.20734505911326e-25),
  Double(1.6059043836821613e-10,1.2585294588752098e-26),
  Double(1.1470745597729725e-11,2.0655512752830745e-28),
  Double(7.647163731819816e-13,7.03872877733453e-30),
  Double(4.779477332387385e-14,4.399205485834081e-31),
  Double(2.8114572543455206e-15,1.6508842730861433e-31),
  Double(1.5619206968586225e-16,1.1910679660273754e-32),
  Double(8.22063524662433e-18,2.2141894119604265e-34),
  Double(4.110317623312165e-19,1.4412973378659527e-36),
  Double(1.9572941063391263e-20,-1.3643503830087908e-36),
  Double(8.896791392450574e-22,-7.911402614872376e-38),
  Double(3.868170170630684e-23,-8.843177655482344e-40),
  Double(1.6117375710961184e-24,-3.6846573564509766e-41),
  Double(6.446950284384474e-26,-1.9330404233703465e-42),
  Double(2.4795962632247976e-27,-1.2953730964765229e-43),
  Double(9.183689863795546e-29,1.4303150396787322e-45),
  Double(3.279889237069838e-30,1.5117542744029879e-46),
  Double(1.1309962886447716e-31,1.0498015412959506e-47),
  Double(3.7699876288159054e-33,2.5870347832750324e-49),
  Double(1.216125041553518e-34,5.586290567888806e-51),
  Double(3.8003907548547434e-36,1.7457158024652518e-52)
];

# [exp(i) for i in 1:64]
const exp_int = [
 Double(2.718281828459045, 1.4456468917292502e-16),
 Double(7.38905609893065, -1.7971139497839148e-16),
 Double(20.085536923187668, -1.8275625525512858e-16),
 Double(54.598150033144236, 2.8741578015844115e-15),
 Double(148.4131591025766, 3.4863514900464198e-15),
 Double(403.4287934927351, 1.2359628024450387e-14),
 Double(1096.6331584284585, 9.869752640434095e-14),
 Double(2980.9579870417283, -2.7103295816873633e-14),
 Double(8103.083927575384, -2.1530877621067177e-13),
 Double(22026.465794806718, -1.3780134700517372e-12),
 Double(59874.14171519782, 1.7895764888916994e-12), 
 Double(162754.79141900392, 5.30065881322063e-12),
 Double(442413.3920089205, 1.2118711752313224e-11),
 Double(1.2026042841647768e6, -1.5000525764327354e-11),
 Double(3.2690173724721107e6, -3.075806431120808e-11),
 Double(8.886110520507872e6, 5.321182483501564e-10),
 Double(2.41549527535753e7, -7.203995068362157e-10),
 Double(6.565996913733051e7, 1.4165536846555444e-9),
 Double(1.7848230096318725e8, 1.333018530234341e-8),
 Double(4.851651954097903e8, 4.880277289790406e-10),
 Double(1.3188157344832146e9, 8.043448618843281e-8),
 Double(3.584912846131592e9, -2.3519384005402157e-7),
 Double(9.744803446248903e9, -6.74501500127677e-7),
 Double(2.648912212984347e10, 7.670395527778119e-7),
 Double(7.200489933738588e10, -6.992440211033874e-6),
 Double(1.9572960942883878e11, -1.1364989227123904e-5),
 Double(5.3204824060179865e11, -2.8335783945658822e-5),
 Double(1.446257064291475e12, 7.602079742299693e-5),
 Double(3.931334297144042e12, 8.220112058084352e-5),
 Double(1.0686474581524463e13, -0.0007436345313492586),
 Double(2.9048849665247426e13, -0.0005501643178883202),
 Double(7.896296018268069e13, 0.007660978022635108),
 Double(2.1464357978591606e14, 0.002124297761531261),
 Double(5.834617425274549e14, 0.006402902734610391),
 Double(1.5860134523134308e15, -0.02187035537422534),
 Double(4.311231547115195e15, 0.22711342229285691),
 Double(1.1719142372802612e16, -0.6912270602088098),
 Double(3.1855931757113756e16, 0.22032867170129863),
 Double(8.659340042399374e16, 2.953606932719265),
 Double(2.3538526683702e17, -14.592100089250966),
 Double(6.398434935300549e17, 37.22266340351557),
 Double(1.739274941520501e18, 55.394681303611236),
 Double(4.727839468229346e18, 257.4744575627443),
 Double(1.2851600114359308e19, -12.1907003678569),
 Double(3.4934271057485095e19, 436.0347972334061),
 Double(9.496119420602448e19, 5929.133649117119),
 Double(2.5813128861900675e20, -15192.714199784727),
 Double(7.016735912097631e20, 30185.471599886117),
 Double(1.9073465724950998e21, -98786.90015904616),
 Double(5.184705528587072e21, 419031.45332293346),
 Double(1.4093490824269389e22, -614323.8566876298),
 Double(3.831008000716577e22, -661524.304512138),
 Double(1.0413759433029089e23, -7.520901270665062e6), 
 Double(2.830753303274694e23, -4.711377645198593e6),
 Double(7.694785265142018e23, -3.868399744098706e7),
 Double(2.091659496012996e24, 5.079641515721467e7),
 Double(5.685719999335932e24, 2.0801558082063326e8),
 Double(1.545538935590104e25, 1.2092033491117463e8),
 Double(4.2012104037905144e25, -1.7624059056928084e9),
 Double(1.1420073898156842e26, 4.912247462314477e9),
 Double(3.10429793570192e26, 3.39761293411071e9),
 Double(8.438356668741454e26, 6.5719328084037315e10),
 Double(2.29378315946961e27, -7.566162968773138e10),
 Double(6.235149080811617e27, 1.3899738872492847e11),
];

const n_tan_coeff = 16;
const tan_coeff = Double{Float64,Accuracy}[
   Double(1.0, 0.0),
   Double(0.3333333333333333, 1.850371707708594e-17),
   Double(0.13333333333333333, 1.8503717077085942e-18),
   Double(0.05396825396825397, -2.5552752154071065e-18),
   Double(0.021869488536155203, -1.7377829530067485e-19),
   Double(0.008863235529902197, -7.63300580171831e-19),
   Double(0.003592128036572481, -1.253823608406629e-19),
   Double(0.0014558343870513183, -6.214492640136062e-20),
   Double(0.000590027440945586, 3.478690842383652e-20),
   Double(0.00023912911424355248, 3.564613898329782e-21),
   Double(9.691537956929451e-5, -6.2386628755632464e-21),
   Double(3.927832388331683e-5, 1.3737015743076767e-21),
   Double(1.5918905069328964e-5, 1.0427554807190543e-21),
   Double(6.451689215655431e-6, 1.1519922496640058e-22),
   Double(2.6147711512907546e-6, -9.313685621299801e-23),
   Double(1.0597268320104654e-6, 2.3670525505213632e-24),
];

# http://mathworld.wolfram.com/Multiple-AngleFormulas.html find Bromwich
# sin(13*x) = (sin13x_numer ./ oddfact7) .* xs7(x)
sinnumer7(n)=[n, -n*(n^2-1^2), n*(n^2-1^2)*(n^2-3^2), -n*(n^2-1^2)*(n^2-3^2)*(n^2-5^2), n*(n^2-1^2)*(n^2-3^2)*(n^2-5^2)*(n^2-7^2),-n*(n^2-1^2)*(n^2-3^2)*(n^2-5^2)*(n^2-7^2)*(n^2-9^2),n*(n^2-1^2)*(n^2-3^2)*(n^2-5^2)*(n^2-7^2)*(n^2-9^2)*(n^2-11^2), -n*(n^2-1^2)*(n^2-3^2)*(n^2-5^2)*(n^2-7^2)*(n^2-9^2)*(n^2-11^2)*(n^2-13^2)];
sin13x_numer = [13, -2184, 349440, -50319360, 6038323200, -531372441600, 25505877196800]
sin13x_denom = [1, 6, 120, 5040, 362880, 39916800, 6227020800]
sin13x_coeff = [13, -364, 2912, -9984, 16640, -13312, 4096]
    
[factorial(i) for i in 1:2:13];
zs7(x)=[x,x^3,x^5,x^7,x^9,x^11,x^13];
xs7(x)=zs7(sin(x));

sin13x_coeff = (13.0, -364.0, 2912.0, -9984.0, 16640.0, -13312.0, 4096.0)

function xs7(s)
    s2 = s*s
    s3 = s2*s
    s4 = s2*s2
    s5 = s3*s2
    s6 = s3*s3
    s7 = s4*s3
    s9 = s5*s4
    s11 = s6*s5
    s13 = s7*s6
    return (s,s3,s5,s7,s9,s11,s13)
end

# x in 0.0 .. 9/64
function sin13x(x::Double{T,E}) where {T<:AbstractFloat, E<:Emphasis}
    s = sin_taylor(x)
    xs = xs7(s)
    result = zero(typeof(x))
    for i in 1:7
        result += sin13x_coeff[i] * xs[i]
    end
    return result
end
